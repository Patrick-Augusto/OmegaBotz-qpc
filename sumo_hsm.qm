<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.1" links="1">
 <!--${qpc}-->
 <framework name="qpc" license="../../../qp-linux_7.1.2/qp/qpc/LICENSES/QM-EVAL-QPC.qlc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::SumoHSM}-->
  <class name="SumoHSM" superclass="qpc::QMActive">
   <!--${AOs::SumoHSM::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::buzzerTimeEvt}-->
   <attribute name="buzzerTimeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::buzzerCount}-->
   <attribute name="buzzerCount" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::strategy}-->
   <attribute name="strategy" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::timeEvt_2}-->
   <attribute name="timeEvt_2" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::calib_time_1}-->
   <attribute name="calib_time_1" type="uint32_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::calib_time_2}-->
   <attribute name="calib_time_2" type="uint32_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::calib_status}-->
   <attribute name="calib_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::turn_180_time_ms}-->
   <attribute name="turn_180_time_ms" type="uint16_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::star_velocity}-->
   <attribute name="star_velocity" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::pre_strategy}-->
   <attribute name="pre_strategy" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::SM}-->
   <statechart properties="0x03">
    <!--${AOs::SumoHSM::SM::initial}-->
    <initial target="../1">
     <action>(void)par; /* unused parameter */
/* arm the private time event to expire in 1/2s
* and periodically every 1/2 second
*/
QTimeEvt_armX(&amp;me-&gt;buzzerTimeEvt, BSP_TICKS_PER_SEC/10, 0);

me-&gt;buzzerCount = 0U;</action>
     <initial_glyph conn="72,7,5,1,21,6,-8">
      <action box="0,-2,7,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::SumoHSM::SM::Idle}-->
    <state name="Idle">
     <entry>board_led_off();
drive(0,0);
me-&gt;strategy = 0;
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;buzzerTimeEvt);</exit>
     <!--${AOs::SumoHSM::SM::Idle::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>board_led_toggle();</action>
      <tran_glyph conn="42,30,3,-1,14">
       <action box="0,-2,14,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::Idle::RADIO_EVT_1}-->
     <tran trig="RADIO_EVT_1" target="../../4">
      <tran_glyph conn="42,41,3,3,-19,17,12">
       <action box="-16,-3,18,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::Idle::PLAY_BUZZER}-->
     <tran trig="PLAY_BUZZER">
      <action>BSP_buzzerBeep();

if (me-&gt;buzzerCount == 15) {
    QTimeEvt_armX(&amp;me-&gt;buzzerTimeEvt, 1.6 * BSP_TICKS_PER_SEC, 0);
    led_stripe_set(me-&gt;buzzerCount, color_purple);
} else if (me-&gt;buzzerCount &lt; 15){
    QTimeEvt_armX(&amp;me-&gt;buzzerTimeEvt, BSP_TICKS_PER_SEC/10, 0);
    led_stripe_set(me-&gt;buzzerCount, color_purple);
}


me-&gt;buzzerCount += 1;</action>
      <tran_glyph conn="42,34,3,-1,14">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="42,11,43,33">
      <entry box="1,2,24,6"/>
      <exit box="1,8,38,7"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::RCWait}-->
    <state name="RCWait">
     <entry>board_led_off();
led_stripe_set_strategy_color(me-&gt;strategy);
drive(0,0);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC/10, BSP_TICKS_PER_SEC/10);</entry>
     <exit brief="StopTimer">QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::SumoHSM::SM::RCWait::START}-->
     <tran trig="START" target="../../9">
      <tran_glyph conn="118,65,3,3,-7,16,6">
       <action box="-7,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::RADIO_EVT_1}-->
     <tran trig="RADIO_EVT_1" target="../../7">
      <tran_glyph conn="138,55,1,3,63">
       <action box="0,-2,18,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>board_led_toggle();</action>
      <tran_glyph conn="118,63,3,-1,12,-1">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::RADIO_EVT_2}-->
     <tran trig="RADIO_EVT_2">
      <action brief="Update Strategy">SumoHSM_change_strategy(me);
led_stripe_set_strategy_color(me-&gt;strategy);</action>
      <tran_glyph conn="118,66,3,-1,12">
       <action box="0,-2,20,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="118,52,20,18">
      <entry box="1,2,14,4"/>
      <exit box="1,6,14,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::StarStrategy}-->
    <state name="StarStrategy">
     <entry>drive(me-&gt;star_velocity, me-&gt;star_velocity);</entry>
     <!--${AOs::SumoHSM::SM::StarStrategy::LINE_CHANGED}-->
     <tran trig="LINE_CHANGED" target="../../10">
      <tran_glyph conn="24,115,3,3,-8,28,8">
       <action box="0,-2,15,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StarStrategy::STOP}-->
     <tran trig="STOP" target="../../4">
      <tran_glyph conn="24,107,3,3,-12,-35,23">
       <action box="-9,-3,6,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StarStrategy::DIST_SENSOR_CHANGE}-->
     <tran trig="DIST_SENSOR_CHANGE">
      <action brief="CheckSensors">if (distance_is_active(DIST_SENSOR_R)) {
   drive(80,-80);
} else if (distance_is_active(DIST_SENSOR_FR)) {
   drive(80,0);
} else if (distance_is_active(DIST_SENSOR_F)) {
   drive(100,100);
} else if (distance_is_active(DIST_SENSOR_FL)) {
   drive(0,80);
} else if (distance_is_active(DIST_SENSOR_L)) {
   drive(-80,80);
} else {
   drive(60,60);
}</action>
      <tran_glyph conn="24,120,3,-1,20">
       <action box="0,-2,24,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="24,104,25,28">
      <entry box="1,2,23,6"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::AutoWait}-->
    <state name="AutoWait">
     <entry>drive(0,0);
board_led_on();
led_stripe_set_strategy_color(me-&gt;strategy);
led_stripe_set_pre_strategy_color(me-&gt;pre_strategy);</entry>
     <!--${AOs::SumoHSM::SM::AutoWait::START}-->
     <tran trig="START">
      <!--${AOs::SumoHSM::SM::AutoWait::START::[pre_strategy_0]}-->
      <choice target="../../../12" cpref="../../../15/0">
       <guard brief="pre_strategy_0">me-&gt;pre_strategy == 0</guard>
       <choice_glyph conn="52,77,5,0,-22,8">
        <action box="-34,1,12,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[pre_strategy_1]}-->
      <choice target="../../../12" cpref="../../../15/1">
       <guard brief="pre_strategy_1">me-&gt;pre_strategy == 1</guard>
       <choice_glyph conn="52,77,5,0,-7,8">
        <action box="-20,1,13,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[pre_strategy_2]}-->
      <choice target="../../../12" cpref="../../../15/2">
       <guard brief="pre_strategy_2">me-&gt;pre_strategy == 2</guard>
       <choice_glyph conn="52,77,5,0,6,8">
        <action box="-6,1,11,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[pre_strategy_3]}-->
      <choice target="../../../12" cpref="../../../15/3">
       <guard brief="pre_strategy_3">me-&gt;pre_strategy == 3</guard>
       <choice_glyph conn="52,77,5,0,20,8">
        <action box="8,1,13,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="35,70,3,-1,17,7">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::RADIO_EVT_1}-->
     <tran trig="RADIO_EVT_1" target="../../2">
      <tran_glyph conn="71,56,1,3,47">
       <action box="1,-3,19,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::RADIO_EVT_2}-->
     <tran trig="RADIO_EVT_2">
      <action brief="change_strategy">SumoHSM_change_strategy(me);
led_stripe_set_strategy_color(me-&gt;strategy);</action>
      <tran_glyph conn="35,63,3,-1,11">
       <action box="0,-3,29,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::RADIO_EVT_3}-->
     <tran trig="RADIO_EVT_3">
      <action brief="change_pre_strategy">SumoHSM_change_pre_strategy(me);
led_stripe_set_pre_strategy_color(me-&gt;pre_strategy);</action>
      <tran_glyph conn="35,66,3,-1,12">
       <action box="0,-2,31,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="35,48,36,26">
      <entry box="1,2,35,8"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::StepsStrategy}-->
    <state name="StepsStrategy">
     <entry brief="arm_timer">drive(0,0);
QTimeEvt_armX(&amp;me-&gt;timeEvt, 3 * BSP_TICKS_PER_SEC, 3 * BSP_TICKS_PER_SEC);</entry>
     <exit brief="disarm_timer">QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);</exit>
     <!--${AOs::SumoHSM::SM::StepsStrategy::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>drive(100,100);
QTimeEvt_armX(&amp;me-&gt;timeEvt_2, BSP_TICKS_PER_MILISSEC * 100, 0);</action>
      <tran_glyph conn="59,113,3,-1,8">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StepsStrategy::TIMEOUT_2}-->
     <tran trig="TIMEOUT_2">
      <action>drive(0,0);</action>
      <tran_glyph conn="59,116,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StepsStrategy::STOP}-->
     <tran trig="STOP" target="../../4">
      <tran_glyph conn="83,112,1,1,7,-44,-19">
       <action box="1,-5,6,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StepsStrategy::DIST_SENSOR_CHANGE}-->
     <tran trig="DIST_SENSOR_CHANGE">
      <action brief="CheckSensors">QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);

if (distance_is_active(DIST_SENSOR_R)) {
   drive(80,-80);
} else if (distance_is_active(DIST_SENSOR_FR)) {
   drive(80,0);
} else if (distance_is_active(DIST_SENSOR_F)) {
   drive(100,100);
} else if (distance_is_active(DIST_SENSOR_FL)) {
   drive(0,80);
} else if (distance_is_active(DIST_SENSOR_L)) {
   drive(-80,80);
} else {
   drive(0,0);
   QTimeEvt_armX(&amp;me-&gt;timeEvt, 3 * BSP_TICKS_PER_SEC, 3 * BSP_TICKS_PER_SEC);
}

</action>
      <tran_glyph conn="59,124,3,-1,16">
       <action box="0,-2,21,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StepsStrategy::LINE_CHANGED}-->
     <tran trig="LINE_CHANGED" target="../../11">
      <tran_glyph conn="59,120,3,3,-1,26,3">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="59,104,24,28">
      <entry box="1,2,19,2"/>
      <exit box="1,4,19,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibTurn}-->
    <state name="CalibTurn">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt_2, 0xFFFFFFFF, 0);
drive(me-&gt;star_velocity, me-&gt;star_velocity);</entry>
     <!--${AOs::SumoHSM::SM::CalibTurn::LINE_CHANGED}-->
     <tran trig="LINE_CHANGED" target="../1">
      <action>if (me-&gt;calib_status == 0){
    me-&gt;calib_time_1 = 0xFFFFFFFF - QTimeEvt_currCtr(&amp;me-&gt;timeEvt_2);
} else {
    me-&gt;calib_time_2 = 0xFFFFFFFF - QTimeEvt_currCtr(&amp;me-&gt;timeEvt_2);
}</action>
      <tran_glyph conn="171,79,3,0,20,2">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibTurn::CalibLineGoBack}-->
     <state name="CalibLineGoBack">
      <entry>drive(-100,-100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 250, 0);</entry>
      <!--${AOs::SumoHSM::SM::CalibTurn::CalibLineGoBack::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../1">
       <tran_glyph conn="185,89,3,3,10">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::CalibTurn::CalibLineGoBack::CalibeLineTurn}-->
      <state name="CalibeLineTurn">
       <entry brief="turn">drive(-100,100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * me-&gt;turn_180_time_ms, 0);</entry>
       <!--${AOs::SumoHSM::SM::CalibTurn::CalibLineGoBack::CalibeLineTurn::TIMEOUT}-->
       <tran trig="TIMEOUT">
        <!--${AOs::SumoHSM::SM::CalibTurn::CalibLineGoBack::CalibeLineTurn::TIMEOUT::[calib_0]}-->
        <choice target="../../../..">
         <guard brief="calib_0">me-&gt;calib_status == 0</guard>
         <action brief="update_calib_status">me-&gt;calib_status++;
QTimeEvt_rearm(&amp;me-&gt;timeEvt_2, 0xFFFFFFFF);
drive(60,60);
</action>
         <choice_glyph conn="180,92,4,3,-1,-9">
          <action box="-9,-6,14,4"/>
         </choice_glyph>
        </choice>
        <!--${AOs::SumoHSM::SM::CalibTurn::CalibLineGoBack::CalibeLineTurn::TIMEOUT::[calib_1]}-->
        <choice target="../../../../../7">
         <guard brief="calib_1">me-&gt;calib_status != 0</guard>
         <action brief="calibrate_turn">QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);

uint8_t angle_diff;
if (me-&gt;calib_time_2 &gt; me-&gt;calib_time_1){
    angle_diff = 0;
} else {
    angle_diff = ((180 / M_PI) * acos((me-&gt;calib_time_2) / (double) me-&gt;calib_time_1));
}

if (me-&gt;strategy == 0) {
    me-&gt;turn_180_time_ms += angle_diff * CALIB_ANGLE_MULT;
} else {
    me-&gt;turn_180_time_ms -= angle_diff * CALIB_ANGLE_MULT;
}

</action>
         <choice_glyph conn="180,92,4,3,3,-15,-37,36">
          <action box="-20,4,10,5"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="195,92,3,-1,-15">
         <action box="-10,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="195,85,13,10">
        <entry box="1,2,8,2"/>
       </state_glyph>
      </state>
      <state_glyph node="185,81,28,17">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="171,69,43,35">
      <entry box="1,2,41,7"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibWait}-->
    <state name="CalibWait">
     <entry>board_led_on();
drive(0,0);
led_stripe_set_strategy_color(me-&gt;strategy);
me-&gt;calib_status = 0;
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 250, 0);</entry>
     <exit brief="StopTimer">QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::SumoHSM::SM::CalibWait::START}-->
     <tran trig="START">
      <!--${AOs::SumoHSM::SM::CalibWait::START::[strategy_0||strategy_1]}-->
      <choice target="../../../6">
       <guard brief="strategy_0 || strategy_1">me-&gt;strategy == 0 || me-&gt;strategy == 1</guard>
       <choice_glyph conn="214,64,5,0,-21,5">
        <action box="-20,0,19,3"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::CalibWait::START::[strategy_2]}-->
      <choice target="../../../8">
       <guard brief="strategy_2">me-&gt;strategy == 2</guard>
       <choice_glyph conn="214,64,5,0,29,4">
        <action box="7,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="214,61,2,-1,3">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::RADIO_EVT_1}-->
     <tran trig="RADIO_EVT_1" target="../../1">
      <action>led_stripe_set_all(color_purple);</action>
      <tran_glyph conn="203,46,0,1,-17,-118">
       <action box="-115,-20,17,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>static bool time_long;

board_led_toggle();

if (time_long){
    QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 150, 0);
} else {
    QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 1000, 0);
}
time_long = !time_long;

</action>
      <tran_glyph conn="201,54,3,-1,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::RADIO_EVT_2}-->
     <tran trig="RADIO_EVT_2">
      <action>SumoHSM_change_strategy(me);
led_stripe_set_strategy_color(me-&gt;strategy);</action>
      <tran_glyph conn="201,57,3,-1,12">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="201,46,26,15">
      <entry box="1,2,12,2"/>
      <exit box="1,4,13,3"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibFront}-->
    <state name="CalibFront">
     <entry>QTimeEvt_armX(&amp;me-&gt;timeEvt_2, 0xFFFFFFFF, 0);
drive(me-&gt;star_velocity, me-&gt;star_velocity);</entry>
     <!--${AOs::SumoHSM::SM::CalibFront::LINE_CHANGED}-->
     <tran trig="LINE_CHANGED" target="../1">
      <action>uint32_t time_until_line = 0xFFFFFFFF - QTimeEvt_currCtr(&amp;me-&gt;timeEvt_2);

int16_t diff_to_reference = time_until_line - 285;

me-&gt;star_velocity += (diff_to_reference / 5);

</action>
      <tran_glyph conn="225,79,3,0,21,2">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibFront::CalibFrontGoBack}-->
     <state name="CalibFrontGoBack">
      <entry>drive(-100,-100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 250, 0);</entry>
      <!--${AOs::SumoHSM::SM::CalibFront::CalibFrontGoBack::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../1">
       <tran_glyph conn="234,89,3,3,9">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::CalibFront::CalibFrontGoBack::CalibeFrontTurn}-->
      <state name="CalibeFrontTurn">
       <entry brief="turn">drive(-100,100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * me-&gt;turn_180_time_ms, 0);</entry>
       <!--${AOs::SumoHSM::SM::CalibFront::CalibFrontGoBack::CalibeFrontTurn::TIMEOUT}-->
       <tran trig="TIMEOUT" target="../../../../7">
        <action>QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);</action>
        <tran_glyph conn="256,90,1,1,11,-36,-40">
         <action box="-28,-39,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="243,86,13,10">
        <entry box="1,2,8,2"/>
       </state_glyph>
      </state>
      <state_glyph node="234,81,24,17">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="225,68,35,33">
      <entry box="1,2,29,6"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::RC}-->
    <state name="RC">
     <entry>board_led_off();</entry>
     <!--${AOs::SumoHSM::SM::RC::RADIO_DATA}-->
     <tran trig="RADIO_DATA">
      <action>int coord_x = BSP_radioGetChannel(RADIO_CH1);
int coord_y = BSP_radioGetChannel(RADIO_CH2);

int mot1 = coord_y + coord_x;
int mot2 = coord_y - coord_x;

drive(mot1, mot2);</action>
      <tran_glyph conn="117,87,3,-1,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC::STOP}-->
     <tran trig="STOP" target="../../2">
      <tran_glyph conn="137,80,1,1,6,-15,-5">
       <action box="2,-18,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC::LINE_CHANGED}-->
     <tran trig="LINE_CHANGED">
      <!--${AOs::SumoHSM::SM::RC::LINE_CHANGED::[strategy>0]}-->
      <choice target="../../../13">
       <guard brief="strategy &gt; 0">me-&gt;strategy &gt; 0</guard>
       <choice_glyph conn="127,99,4,0,5">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="117,91,3,-1,10,8">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="117,77,20,20">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::line1}-->
    <smstate name="line1" submachine="../14">
     <!--${AOs::SumoHSM::SM::line1::XP1}-->
     <xpseg xpref="../../14/0" target="../../3">
      <xpseg_glyph conn="45,138,0,2,-4,2,-2">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::line1::STOP}-->
     <xpseg xpref="../../14/1" target="../../4">
      <xpseg_glyph conn="42,150,2,1,3,55,-89,-26">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="24,138,24,12"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::line2}-->
    <smstate name="line2" submachine="../14">
     <!--${AOs::SumoHSM::SM::line2::XP1}-->
     <xpseg xpref="../../14/0" target="../../5">
      <xpseg_glyph conn="82,138,0,2,-6">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::line2::STOP}-->
     <xpseg xpref="../../14/1" target="../../4">
      <xpseg_glyph conn="79,150,2,1,2,17,-86,-25">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="61,138,24,12"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::pre_strategy}-->
    <smstate name="pre_strategy" submachine="../15">
     <!--${AOs::SumoHSM::SM::pre_strategy::XP1}-->
     <xpseg xpref="../../15/4">
      <!--${AOs::SumoHSM::SM::pre_strategy::XP1::[strategy_0]}-->
      <choice target="../../../3">
       <guard brief="strategy_0">me-&gt;strategy == 0</guard>
       <choice_glyph conn="52,98,5,0,-18,6">
        <action box="-15,-3,10,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::pre_strategy::XP1::[else]}-->
      <choice target="../../../5">
       <guard brief="else">else</guard>
       <choice_glyph conn="52,98,5,0,21,6">
        <action box="3,-3,10,2"/>
       </choice_glyph>
      </choice>
      <xpseg_glyph conn="52,93,2,-1,5">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="23,86,57,7"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::line_rc}-->
    <smstate name="line_rc" submachine="../14">
     <!--${AOs::SumoHSM::SM::line_rc::XP1}-->
     <xpseg xpref="../../14/0" target="../../9">
      <xpseg_glyph conn="138,104,0,1,-2,2,-9,-3">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::line_rc::STOP}-->
     <xpseg xpref="../../14/1" target="../../2">
      <xpseg_glyph conn="134,110,2,1,2,13,-52,-9">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="110,104,32,6"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::LineSubmachine}-->
    <submachine name="LineSubmachine">
     <!--${AOs::SumoHSM::SM::LineSubmachine::XP-XP1}-->
     <xp name="XP1">
      <xp_glyph point="72,2,0">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::LineSubmachine::XP-STOP}-->
     <xp name="STOP">
      <xp_glyph point="64,46,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::LineSubmachine::initial}-->
     <initial target="../3">
      <initial_glyph conn="6,6,5,0,11,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack}-->
     <state name="LineGoBack">
      <entry brief="go_back">drive(-100,-100);

if (line_is_white(LINE_FL)){
    QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 250, 0);
} else {
    QTimeEvt_armX(&amp;me-&gt;timeEvt_2, BSP_TICKS_PER_MILISSEC * 250, 0);
}</entry>
      <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../3">
       <tran_glyph conn="7,19,3,0,10,2">
        <action box="0,-2,16,4"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::STOP}-->
      <tran trig="STOP" target="../.." cpref="../../1">
       <tran_glyph conn="61,23,1,2,3,22">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::TIMEOUT_2}-->
      <tran trig="TIMEOUT_2" target="../4">
       <tran_glyph conn="7,16,3,0,36,5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::LineTurnRight}-->
      <state name="LineTurnRight">
       <entry brief="turn right">drive(100,-100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * me-&gt;turn_180_time_ms * (0.6), 0);</entry>
       <exit>drive(0,0);</exit>
       <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::LineTurnRight::TIMEOUT}-->
       <tran trig="TIMEOUT" target="../../.." cpref="../../../0">
        <tran_glyph conn="11,33,3,0,61,-30">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::LineTurnRight::DIST_SENSOR_CHANGE}-->
       <tran trig="DIST_SENSOR_CHANGE" target="../../.." cpref="../../../0">
        <tran_glyph conn="11,37,3,0,61,-34">
         <action box="0,-2,23,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="11,21,21,22">
        <entry box="1,2,10,2"/>
        <exit box="1,4,18,4"/>
       </state_glyph>
      </state>
      <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::LineTurnLeft}-->
      <state name="LineTurnLeft">
       <entry brief="turn left">drive(-100,100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * me-&gt;turn_180_time_ms * (0.6), 0);</entry>
       <exit>drive(0,0);</exit>
       <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::LineTurnLeft::TIMEOUT}-->
       <tran trig="TIMEOUT" target="../../.." cpref="../../../0">
        <tran_glyph conn="36,34,3,0,36,-31">
         <action box="0,-3,10,2"/>
        </tran_glyph>
       </tran>
       <!--${AOs::SumoHSM::SM::LineSubmachine::LineGoBack::LineTurnLeft::DIST_SENSOR_CHANGE}-->
       <tran trig="DIST_SENSOR_CHANGE" target="../../.." cpref="../../../0">
        <tran_glyph conn="36,40,3,0,36,-37">
         <action box="0,-2,23,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,21,21,22">
        <entry box="1,2,10,2"/>
        <exit box="1,4,18,4"/>
       </state_glyph>
      </state>
      <state_glyph node="7,9,54,36">
       <entry box="1,2,16,3"/>
      </state_glyph>
     </state>
     <submachine_diagram size="81,44"/>
    </submachine>
    <!--${AOs::SumoHSM::SM::PreStrategy}-->
    <submachine name="PreStrategy">
     <entry brief="Disable_timers">QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);</entry>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP0}-->
     <epseg name="EP0" target="../5">
      <epseg_glyph conn="19,2,0,0,9">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP1}-->
     <epseg name="EP1" target="../8">
      <epseg_glyph conn="53,2,0,0,9">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP2}-->
     <epseg name="EP2" target="../6">
      <epseg_glyph conn="85,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP3}-->
     <epseg name="EP3" target="../7">
      <epseg_glyph conn="117,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::XP-XP1}-->
     <xp name="XP1">
      <xp_glyph point="69,66,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_0}-->
     <state name="PreStrategy_0">
      <entry brief="motor_on">drive(100,100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 10, 0);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_0::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../4">
       <tran_glyph conn="8,20,3,2,-2,40,63,5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,11,26,47">
       <entry box="1,2,14,4"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_2}-->
     <state name="PreStrategy_2">
      <state_glyph node="72,10,26,47"/>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_3}-->
     <state name="PreStrategy_3">
      <state_glyph node="104,10,26,47"/>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1}-->
     <state name="PreStrategy_1">
      <entry brief="turn_left">drive(-60,60);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * me-&gt;turn_180_time_ms * (0.2), 0);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../2">
       <tran_glyph conn="40,19,3,0,13,2">
        <action box="0,-2,16,4"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1::pre_strategy_0_sub2}-->
      <state name="pre_strategy_0_sub2">
       <entry brief="turn_right">drive(100,-100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * me-&gt;turn_180_time_ms * (0.4), 0);</entry>
       <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1::pre_strategy_0_s~::TIMEOUT}-->
       <tran trig="TIMEOUT" target="../../.." cpref="../../../4">
        <tran_glyph conn="43,43,3,2,9,17,17,5">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="43,35,20,13">
        <entry box="1,2,12,3"/>
       </state_glyph>
      </state>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1::pre_strategy_0_sub1}-->
      <state name="pre_strategy_0_sub1">
       <entry brief="motor_front">drive(100,100);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 500, 0);</entry>
       <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1::pre_strategy_0_s~::TIMEOUT}-->
       <tran trig="TIMEOUT" target="../../1">
        <tran_glyph conn="43,29,3,0,10,6">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="43,21,20,11">
        <entry box="1,2,15,4"/>
       </state_glyph>
      </state>
      <state_glyph node="40,11,26,47">
       <entry box="1,2,18,4"/>
      </state_glyph>
     </state>
     <submachine_diagram size="134,64">
      <entry box="1,2,22,4"/>
     </submachine_diagram>
    </submachine>
    <state_diagram size="271,181"/>
   </statechart>
  </class>
  <!--${AOs::SumoHSM_ctor}-->
  <operation name="SumoHSM_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>SumoHSM *me = (SumoHSM *)AO_SumoHSM;
QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;SumoHSM_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super.super, TIMEOUT_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;timeEvt_2, &amp;me-&gt;super.super, TIMEOUT_2_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;buzzerTimeEvt, &amp;me-&gt;super.super, PLAY_BUZZER_SIG, 0U);
me-&gt;strategy = 0;
me-&gt;pre_strategy = 0;
me-&gt;calib_time_1 = 0;
me-&gt;calib_time_2 = 0;
me-&gt;calib_status = 0;
me-&gt;turn_180_time_ms = 800;
me-&gt;star_velocity = 60;</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::src}-->
  <directory name="src">
   <!--${.::src::sumo_hsm.c}-->
   <file name="sumo_hsm.c">
    <text>#include &lt;math.h&gt;
#include &quot;qf_custom_defines.h&quot;
#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &quot;led_service.h&quot;
#include &quot;driving_service.h&quot;
#include &quot;bsp_buzzer.h&quot;
#include &quot;bsp_radio.h&quot;
#include &quot;distance_service.h&quot;
#include &quot;line_service.h&quot;

#define CALIB_ANGLE_MULT    2.5
#ifndef M_PI
#define M_PI                3.14159265
#endif
/* ask QM to declare the Blinky class --------------------------------------*/
$declare${AOs::SumoHSM}

static void SumoHSM_change_strategy(SumoHSM * const me);

/* instantiate the Blinky active object ------------------------------------*/
static SumoHSM l_sumo_hsm;
QActive * const AO_SumoHSM = &amp;l_sumo_hsm.super.super;

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::SumoHSM_ctor}

static void SumoHSM_change_strategy(SumoHSM * const me) {
    me-&gt;strategy++;
    if (me-&gt;strategy &gt; 2){
        me-&gt;strategy = 0;
    }
}

static void SumoHSM_change_pre_strategy(SumoHSM * const me) {
    me-&gt;pre_strategy++;
    if (me-&gt;pre_strategy &gt; 3){
        me-&gt;pre_strategy = 0;
    }
}

$define${AOs::SumoHSM}

#ifdef Q_SPY

void sumoHSM_update_qs_dict(){

    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.timeEvt);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.timeEvt_2);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.buzzerTimeEvt);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.strategy);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.calib_time_1);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.calib_time_2);

    QS_SIG_DICTIONARY(TIMEOUT_SIG,     (void *)0);
    QS_SIG_DICTIONARY(TIMEOUT_2_SIG, (void *)0);
    QS_SIG_DICTIONARY(PLAY_BUZZER_SIG,    (void *)0);
    QS_SIG_DICTIONARY(START_SIG,  (void *)0);
    QS_SIG_DICTIONARY(RADIO_EVT_1_SIG,  (void *)0);
    QS_SIG_DICTIONARY(RADIO_EVT_2_SIG,  (void *)0);
    QS_SIG_DICTIONARY(RADIO_EVT_3_SIG,  (void *)0);
    QS_SIG_DICTIONARY(STOP_SIG,  (void *)0);
    QS_SIG_DICTIONARY(LINE_CHANGED_SIG,  (void *)0);
    QS_SIG_DICTIONARY(DIST_SENSOR_CHANGE_SIG,  (void *)0);
    QS_SIG_DICTIONARY(RADIO_DATA_SIG,  (void *)0);
    QS_SIG_DICTIONARY(BUTTON_SIG,  (void *)0);


}

#endif</text>
   </file>
   <!--${.::src::main.c}-->
   <file name="main.c">
    <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &quot;app.h&quot;
#include &quot;start_module_ao.h&quot;

Q_DEFINE_THIS_FILE

/* the main function -------------------------------------------------------*/
int main() {
    static QEvt const *sumoHSM_queueSto[10]; /* event queue buffer for SumoHSM */

    QF_init();  /* initialize the framework */
    BSP_init(); /* initialize the BSP */
    APP_init();

    /* instantiate and start the SumoHSM active object */
    SumoHSM_ctor(); /* in C you must explicitly call the SumoHSM constructor */
    
    #ifdef Q_SPY
    sumoHSM_update_qs_dict();
    #endif

    QACTIVE_START(AO_SumoHSM, /* active object to start */
        2U,                  /* priority of the active object */
        sumoHSM_queueSto,     /* event queue buffer */
        Q_DIM(sumoHSM_queueSto), /* the length of the buffer */
        (void *)0, 0U,       /* private stack (not used) */
        (QEvt *)0);          /* initialization event (not used) */

    start_module_ao_init();

    return QF_run(); /* let the framework run the application */
}</text>
   </file>
  </directory>
  <!--${.::inc}-->
  <directory name="inc">
   <!--${.::inc::bsp.h}-->
   <file name="bsp.h">
    <text>#ifndef BSP_H
#define BSP_H

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { 
    BSP_TICKS_PER_SEC = 100
}; /* number of clock ticks in a second */

typedef enum {
    SIMULATOR = 100, //QS_USER0 on qs.h file. only useful on Qspy config
} qs_user_names_t;


#define BSP_TICKS_PER_MILISSEC (BSP_TICKS_PER_SEC/1000.0)

void BSP_init(void);

/* define the event signals used in the application ------------------------*/
enum SumoHSMSignals {
    TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    TIMEOUT_2_SIG,
    TIMEOUT_3_SIG,
    PLAY_BUZZER_SIG,
    START_SIG,
    STOP_SIG,
    RADIO_EVT_1_SIG,
    RADIO_EVT_2_SIG,
    RADIO_EVT_3_SIG,
    LINE_CHANGED_SIG,
    DIST_SENSOR_CHANGE_SIG,
    RADIO_DATA_SIG,
    BUTTON_SIG,
    MAX_SIG_SUMO_HSM, /* keep last (the number of signals) */
};

/* active object(s) used in this application -------------------------------*/
extern QActive * const AO_SumoHSM; /* opaque pointer to the SumoHSM AO */
$declare${AOs::SumoHSM_ctor}

#ifdef Q_SPY
void sumoHSM_update_qs_dict(void);
#endif

#endif /* BSP_H */</text>
   </file>
  </directory>
 </directory>
</model>
